package priv.ivrdsl;

/*Generated by IVR DSL */

import org.dom4j.DocumentException;
import priv.ivrdsl.model.EventBean;
import priv.ivrdsl.model.GlobalVariableBean;
import priv.ivrdsl.impl.QueryCaseImpl;
import priv.ivrdsl.service.EventLogic;
import priv.ivrdsl.util.VoiceOutputUtils;
import priv.ivrdsl.view.Init;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

/**
 * IVR 主程序。调用 {@code main} 方法运行。
 * <p>
 * 由 IVR DSL Compiler 自动生成，运行 {@code Application} 以调用 Compiler 的接口。
 *
 * @author Guanidine Beryllium
 * @see Application
 */
public class VoiceMenu implements ActionListener {

    /** 初始化一个事件监听实例 */
    public static VoiceMenu instance;

    /**
     * 构造 trigger-event 树。
     *
     * @see priv.ivrdsl.model.IvrMap
     */
    public static void initHashMap() {
        EventBean Action_0_0lk9ks = new EventBean("Home", "China-Mobile", "0", "欢迎致电申国移动");
        Action_0_0lk9ks.setAction("", true);

        GlobalVariableBean.event2TriggerMap.put("0", Action_0_0lk9ks);

        EventBean Action_01_0lk9ks = new EventBean("Action_01", "转接服务", "1", "分号123");
        GlobalVariableBean.event2TriggerMap.put("01", Action_01_0lk9ks);
        Action_01_0lk9ks.setAction("call", true);
        Action_0_0lk9ks.addChild(Action_01_0lk9ks);

        EventBean Action_02_0lk9ks = new EventBean("Action_02", "信息业务", "2", "tbDataPlan");
        GlobalVariableBean.event2TriggerMap.put("02", Action_02_0lk9ks);
        Action_02_0lk9ks.setAction("info", true);
        Action_0_0lk9ks.addChild(Action_02_0lk9ks);

        EventBean Action_04_0lk9ks = new EventBean("Action_04", "录音", "4", "");
        GlobalVariableBean.event2TriggerMap.put("04", Action_04_0lk9ks);
        Action_04_0lk9ks.setAction("record", true);
        Action_0_0lk9ks.addChild(Action_04_0lk9ks);

        EventBean Action_05_0lk9ks = new EventBean("Action_05", "人工服务", "5", "");
        GlobalVariableBean.event2TriggerMap.put("05", Action_05_0lk9ks);
        Action_05_0lk9ks.setAction("manual", true);
        Action_0_0lk9ks.addChild(Action_05_0lk9ks);

        EventBean Action_09_0lk9ks = new EventBean("Action_09", "重听", "9", "");
        GlobalVariableBean.event2TriggerMap.put("09", Action_09_0lk9ks);
        Action_09_0lk9ks.setAction("replay", false);
        Action_0_0lk9ks.addChild(Action_09_0lk9ks);

        EventBean Action_00_0lk9ks = new EventBean("Action_00", "投诉", "0", "");
        GlobalVariableBean.event2TriggerMap.put("00", Action_00_0lk9ks);
        Action_00_0lk9ks.setAction("menu", false);
        Action_0_0lk9ks.addChild(Action_00_0lk9ks);

        EventBean Action_009_0lk9ks = new EventBean("Action_009", "返回上级菜单", "9", "");
        GlobalVariableBean.event2TriggerMap.put("009", Action_009_0lk9ks);
        Action_009_0lk9ks.setAction("back", false);
        Action_00_0lk9ks.addChild(Action_009_0lk9ks);

        EventBean Action_000_0lk9ks = new EventBean("Action_000", "投诉", "0", "");
        GlobalVariableBean.event2TriggerMap.put("000", Action_000_0lk9ks);
        Action_000_0lk9ks.setAction("menu", false);
        Action_00_0lk9ks.addChild(Action_000_0lk9ks);

        EventBean Action_0009_0lk9ks = new EventBean("Action_0009", "返回上级菜单", "9", "");
        GlobalVariableBean.event2TriggerMap.put("0009", Action_0009_0lk9ks);
        Action_0009_0lk9ks.setAction("back", false);
        Action_000_0lk9ks.addChild(Action_0009_0lk9ks);

        EventBean Action_0000_0lk9ks = new EventBean("Action_0000", "结束通话", "0", "");
        GlobalVariableBean.event2TriggerMap.put("0000", Action_0000_0lk9ks);
        Action_0000_0lk9ks.setAction("hangup", true);
        Action_000_0lk9ks.addChild(Action_0000_0lk9ks);

        EventBean Action_00a_0lk9ks = new EventBean("Action_00a", "转接服务", "*", "");
        GlobalVariableBean.event2TriggerMap.put("00*", Action_00a_0lk9ks);
        Action_00a_0lk9ks.setAction("call", true);
        Action_00_0lk9ks.addChild(Action_00a_0lk9ks);

        EventBean Action_00b_0lk9ks = new EventBean("Action_00b", "结束通话", "#", "");
        GlobalVariableBean.event2TriggerMap.put("00#", Action_00b_0lk9ks);
        Action_00b_0lk9ks.setAction("hangup", true);
        Action_00_0lk9ks.addChild(Action_00b_0lk9ks);

    }

    public static void main(String[] args) {
        initHashMap();
        instance = new VoiceMenu();
        VoiceMenu.initHashMap();
        Init.initView(instance);
        EventLogic.runInitSetup();
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        boolean isValidVariable = !(((GlobalVariableBean.curTriggerPath == null || GlobalVariableBean.curTriggerPath.length() == 0) || GlobalVariableBean.hasFinished || !GlobalVariableBean.hasStarted));
        if (isValidVariable) {
            try {
                try {
                    if (VoiceOutputUtils.waitingThr.isAlive()) {
                        VoiceOutputUtils.waitingThr.interrupt();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                EventLogic.runLogic(event, queryCase);
            } catch (IOException | InterruptedException | DocumentException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * {@code QueryCaseImpl} 为返回 {@code String} 类型的接口。
     * <p>
     * 重载此接口，如调用第三方库的方法，以获取数据库查询语句的查询条件，如用户电话号码。
     * <p>
     * 返回字符串格式为 SQL {@code select} 语法中的 {@code where} 部分，例如 {@code return "where mobile = 18987654321"}。
     *
     * @see QueryCaseImpl
     * @see priv.ivrdsl.util.SqlQueryUtils#query
     */
    QueryCaseImpl queryCase = () -> {
        return "";
        // TODO: Override this method before executing!
    };

}

